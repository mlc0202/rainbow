<project name="common" basedir=".">

	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="privatelib" location="lib" />
	<property name="test" location="test" />
	<property name="dest" value="bundle" />
	<basename property="project" file="${basedir}" />

	<path id="emma.lib">
		<fileset dir="../rainbow/ant" includes="emma.jar emma_ant.jar" />
	</path>

	<available file="lib" type="dir" property="lib.present" />
	<available file="test" type="dir" property="test.present" />

	<path id="compile.classpath">
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${root}/bundle" />
		<fileset dir="." includes="lib/*.jar">
			<present present="srconly" targetdir="${lib}"/>
		</fileset>
		<!-- 下面这句是为了core.jar -->
		<fileset dir="${root}/lib" />
	</path>

	<target name="pmd">
		<echo>pmd check ${project} </echo>
		<pmd targetjdk="1.6" encoding="UTF-8" shortFilenames="yes" rulesetfiles="../rainbow/ant/pmdrules.xml">
			<formatter type="html" toFile="${report}/pmd/${project}.pmd.html" />
			<fileset dir="${src}/">
				<include name="**/*.java" />
			</fileset>
		</pmd>
	</target>

	<target name="init">
		<echo>${project}</echo>
		<delete dir="${build}" />
		<mkdir dir="${build}" />
	</target>

	<target name="copyPrivateLib" if="${lib.present}">
		<copy todir="${root}/bundle/${project}">
			<fileset dir="lib" includes="*.jar" />
		</copy>
	</target>
		
	<target name="compile_deploy" depends="init, copyPrivateLib" description="compile the source ">
		<javac srcdir="${src}" destdir="${build}" encoding="UTF-8" includeAntRuntime="no">
			<classpath refid="compile.classpath" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>
	</target>

	<target name="build_deploy" depends="compile_deploy">
		<copy todir="${build}">
			<fileset dir="${src}" excludes="**/*.java,**/.svn" />
		</copy>
		<jar jarfile="${root}/${dest}/${project}.jar" basedir="${build}" />
	</target>

	<target name="compile_dev" depends="init, copyPrivateLib" description="compile the source for development">
		<javac srcdir="${src}" destdir="${build}" encoding="UTF-8" debug="on" includeAntRuntime="no">
			<classpath refid="compile.classpath" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>
		<copy todir="${build}">
			<fileset dir="${src}" />
			<!-- fileset dir="${src}" excludes="**/*.java" / -->
		</copy>
	</target>

	<target name="emma.add.bytecode" depends="compile_dev" if="test.present">
		<delete dir="${emma.dir}/temp" />
		<mkdir dir="${emma.dir}/temp" />
		<emma enabled="true">
			<instr instrpath="${build}" destdir="${emma.dir}/temp" metadatafile="${emma.dir}/${project}.emma" merge="true">
			</instr>
		</emma>
	</target>

	<target name="compile_dev_test" depends="compile_dev" if="test.present">
		<javac srcdir="${test}" destdir="${build}" encoding="UTF-8" debug="on" includeAntRuntime="no">
			<classpath refid="compile.classpath" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>
		<copy todir="${build}">
			<fileset dir="${test}" excludes="**/.svn" />
		</copy>
	</target>

	<!--执行测试用例同时生成junit测试报告和emma代码覆盖率报告-->
	<target name="runjunit" depends="emma.add.bytecode, compile_dev_test" if="test.present">
		<junit fork="true" forkmode="once" printsummary="withOutAndErr" errorproperty="test.error" showoutput="on">
			<!--指明代码覆盖率的元数据的存放位置-->
			<jvmarg value="-Demma.coverage.out.file=${emma.dir}/${project}.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />
			<classpath location="${emma.dir}/temp" />
			<classpath refid="compile.classpath" />
			<classpath refid="emma.lib" />

			<formatter type="xml" />
			<!--执行所有以Test开头的junit测试用例-->
			<test name="com.icitic.${project}.TestSuite" todir="${report}/junit" outfile="${project}.test" haltonfailure="no" />
		</junit>
	</target>

	<target name="build_dev" depends="compile_dev, runjunit" description="build bundle for development">
		<jar jarfile="${root}/${dest}/${project}.jar" basedir="${build}" />
	</target>

</project>